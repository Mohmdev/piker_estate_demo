/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

/**
 * Supported timezones in IANA format.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "supportedTimezones".
 */
export type SupportedTimezones =
  | 'Europe/Istanbul'
  | 'Pacific/Midway'
  | 'Pacific/Niue'
  | 'Pacific/Honolulu'
  | 'Pacific/Rarotonga'
  | 'Pacific/Gambier'
  | 'America/Anchorage'
  | 'America/Los_Angeles'
  | 'America/Tijuana'
  | 'America/Denver'
  | 'America/Phoenix'
  | 'America/Chicago'
  | 'America/Guatemala'
  | 'America/New_York'
  | 'America/Bogota'
  | 'America/Caracas'
  | 'America/Santiago'
  | 'America/Buenos_Aires'
  | 'America/Sao_Paulo'
  | 'Atlantic/South_Georgia'
  | 'Atlantic/Azores'
  | 'Atlantic/Cape_Verde'
  | 'Europe/London'
  | 'Europe/Berlin'
  | 'Africa/Lagos'
  | 'Europe/Athens'
  | 'Africa/Cairo'
  | 'Europe/Moscow'
  | 'Asia/Riyadh'
  | 'Asia/Dubai'
  | 'Asia/Baku'
  | 'Asia/Karachi'
  | 'Asia/Tashkent'
  | 'Asia/Calcutta'
  | 'Asia/Dhaka'
  | 'Asia/Almaty'
  | 'Asia/Jakarta'
  | 'Asia/Bangkok'
  | 'Asia/Shanghai'
  | 'Asia/Singapore'
  | 'Asia/Tokyo'
  | 'Asia/Seoul'
  | 'Australia/Sydney'
  | 'Pacific/Guam'
  | 'Pacific/Noumea'
  | 'Pacific/Auckland'
  | 'Pacific/Fiji';

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    properties: Property;
    'property-categories': PropertyCategory;
    amenities: Amenity;
    availability: Availability;
    'contract-types': ContractType;
    pages: Page;
    blog: Blog;
    'blog-categories': BlogCategory;
    tags: Tag;
    media: Media;
    assets: Asset;
    users: User;
    'user-photos': UserPhoto;
    search: Search;
    forms: Form;
    'form-submissions': FormSubmission;
    redirects: Redirect;
    'payload-jobs': PayloadJob;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {
    'property-categories': {
      properties: 'properties';
    };
    amenities: {
      properties: 'properties';
    };
    availability: {
      properties: 'properties';
    };
    'contract-types': {
      properties: 'properties';
    };
    'blog-categories': {
      records: 'blog';
    };
    tags: {
      pages: 'pages';
      blog: 'blog';
    };
    'user-photos': {
      user: 'users';
    };
  };
  collectionsSelect: {
    properties: PropertiesSelect<false> | PropertiesSelect<true>;
    'property-categories': PropertyCategoriesSelect<false> | PropertyCategoriesSelect<true>;
    amenities: AmenitiesSelect<false> | AmenitiesSelect<true>;
    availability: AvailabilitySelect<false> | AvailabilitySelect<true>;
    'contract-types': ContractTypesSelect<false> | ContractTypesSelect<true>;
    pages: PagesSelect<false> | PagesSelect<true>;
    blog: BlogSelect<false> | BlogSelect<true>;
    'blog-categories': BlogCategoriesSelect<false> | BlogCategoriesSelect<true>;
    tags: TagsSelect<false> | TagsSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    assets: AssetsSelect<false> | AssetsSelect<true>;
    users: UsersSelect<false> | UsersSelect<true>;
    'user-photos': UserPhotosSelect<false> | UserPhotosSelect<true>;
    search: SearchSelect<false> | SearchSelect<true>;
    forms: FormsSelect<false> | FormsSelect<true>;
    'form-submissions': FormSubmissionsSelect<false> | FormSubmissionsSelect<true>;
    redirects: RedirectsSelect<false> | RedirectsSelect<true>;
    'payload-jobs': PayloadJobsSelect<false> | PayloadJobsSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {
    'main-menu': MainMenu;
    footer: Footer;
    'global-settings': GlobalSetting;
  };
  globalsSelect: {
    'main-menu': MainMenuSelect<false> | MainMenuSelect<true>;
    footer: FooterSelect<false> | FooterSelect<true>;
    'global-settings': GlobalSettingsSelect<false> | GlobalSettingsSelect<true>;
  };
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: {
      schedulePublish: TaskSchedulePublish;
      inline: {
        input: unknown;
        output: unknown;
      };
    };
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword:
    | {
        email: string;
      }
    | {
        username: string;
      };
  login:
    | {
        email: string;
        password: string;
      }
    | {
        password: string;
        username: string;
      };
  registerFirstUser: {
    password: string;
    username: string;
    email: string;
  };
  unlock:
    | {
        email: string;
      }
    | {
        username: string;
      };
}
/**
 * Manage all property listings and their details
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "properties".
 */
export interface Property {
  id: number;
  /**
   * Descriptive title for the property
   */
  title: string;
  /**
   * Property price in USD
   */
  price: number;
  /**
   * Show this property in featured sections
   */
  isFeatured?: boolean | null;
  /**
   * Detailed description of the property
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Select the category this property belongs to
   */
  propertyCategory: number | PropertyCategory;
  /**
   * How is this property being offered?
   */
  contractType: number | ContractType;
  /**
   * Current status of this property
   */
  availability: number | Availability;
  /**
   * Enter the complete property location details
   */
  location: {
    /**
     * Primary street address
     */
    address_line1: string;
    /**
     * Apartment, suite, or unit number if applicable
     */
    unit?: string | null;
    /**
     * Secondary address information if needed
     */
    address_line2?: string | null;
    /**
     * City or town name
     */
    city: string;
    /**
     * State or province name
     */
    state: string;
    /**
     * ZIP or postal code
     */
    postcode: string;
    /**
     * Select the country
     */
    country:
      | 'AF'
      | 'AX'
      | 'AL'
      | 'DZ'
      | 'AS'
      | 'AD'
      | 'AO'
      | 'AI'
      | 'AQ'
      | 'AG'
      | 'AR'
      | 'AM'
      | 'AW'
      | 'AU'
      | 'AT'
      | 'AZ'
      | 'BS'
      | 'BH'
      | 'BD'
      | 'BB'
      | 'BY'
      | 'BE'
      | 'BZ'
      | 'BJ'
      | 'BM'
      | 'BT'
      | 'BO'
      | 'BA'
      | 'BW'
      | 'BV'
      | 'BR'
      | 'IO'
      | 'BN'
      | 'BG'
      | 'BF'
      | 'BI'
      | 'KH'
      | 'CM'
      | 'CA'
      | 'CV'
      | 'KY'
      | 'CF'
      | 'TD'
      | 'CL'
      | 'CN'
      | 'CX'
      | 'CC'
      | 'CO'
      | 'KM'
      | 'CG'
      | 'CD'
      | 'CK'
      | 'CR'
      | 'CI'
      | 'HR'
      | 'CU'
      | 'CY'
      | 'CZ'
      | 'DK'
      | 'DJ'
      | 'DM'
      | 'DO'
      | 'EC'
      | 'EG'
      | 'SV'
      | 'GQ'
      | 'ER'
      | 'EE'
      | 'ET'
      | 'FK'
      | 'FO'
      | 'FJ'
      | 'FI'
      | 'FR'
      | 'GF'
      | 'PF'
      | 'TF'
      | 'GA'
      | 'GM'
      | 'GE'
      | 'DE'
      | 'GH'
      | 'GI'
      | 'GR'
      | 'GL'
      | 'GD'
      | 'GP'
      | 'GU'
      | 'GT'
      | 'GG'
      | 'GN'
      | 'GW'
      | 'GY'
      | 'HT'
      | 'HM'
      | 'VA'
      | 'HN'
      | 'HK'
      | 'HU'
      | 'IS'
      | 'IN'
      | 'ID'
      | 'IR'
      | 'IQ'
      | 'IE'
      | 'IM'
      | 'IL'
      | 'IT'
      | 'JM'
      | 'JP'
      | 'JE'
      | 'JO'
      | 'KZ'
      | 'KE'
      | 'KI'
      | 'KP'
      | 'KR'
      | 'XK'
      | 'KW'
      | 'KG'
      | 'LA'
      | 'LV'
      | 'LB'
      | 'LS'
      | 'LR'
      | 'LY'
      | 'LI'
      | 'LT'
      | 'LU'
      | 'MO'
      | 'MK'
      | 'MG'
      | 'MW'
      | 'MY'
      | 'MV'
      | 'ML'
      | 'MT'
      | 'MH'
      | 'MQ'
      | 'MR'
      | 'MU'
      | 'YT'
      | 'MX'
      | 'FM'
      | 'MD'
      | 'MC'
      | 'MN'
      | 'ME'
      | 'MS'
      | 'MA'
      | 'MZ'
      | 'MM'
      | 'NA'
      | 'NR'
      | 'NP'
      | 'NL'
      | 'AN'
      | 'NC'
      | 'NZ'
      | 'NI'
      | 'NE'
      | 'NG'
      | 'NU'
      | 'NF'
      | 'MP'
      | 'NO'
      | 'OM'
      | 'PK'
      | 'PW'
      | 'PS'
      | 'PA'
      | 'PG'
      | 'PY'
      | 'PE'
      | 'PH'
      | 'PN'
      | 'PL'
      | 'PT'
      | 'PR'
      | 'QA'
      | 'RE'
      | 'RO'
      | 'RU'
      | 'RW'
      | 'SH'
      | 'KN'
      | 'LC'
      | 'PM'
      | 'VC'
      | 'WS'
      | 'SM'
      | 'ST'
      | 'SA'
      | 'SN'
      | 'RS'
      | 'SC'
      | 'SL'
      | 'SG'
      | 'SK'
      | 'SI'
      | 'SB'
      | 'SO'
      | 'ZA'
      | 'GS'
      | 'ES'
      | 'LK'
      | 'SD'
      | 'SR'
      | 'SJ'
      | 'SZ'
      | 'SE'
      | 'CH'
      | 'SY'
      | 'TW'
      | 'TJ'
      | 'TZ'
      | 'TH'
      | 'TL'
      | 'TG'
      | 'TK'
      | 'TO'
      | 'TT'
      | 'TN'
      | 'TR'
      | 'TM'
      | 'TC'
      | 'TV'
      | 'UG'
      | 'UA'
      | 'AE'
      | 'GB'
      | 'US'
      | 'UM'
      | 'UY'
      | 'UZ'
      | 'VU'
      | 'VE'
      | 'VN'
      | 'VG'
      | 'VI'
      | 'WF'
      | 'EH'
      | 'YE'
      | 'ZM'
      | 'ZW';
    /**
     * Precise geographical coordinates for mapping
     */
    coordinates?: {
      /**
       * North-South position
       */
      latitude?: number | null;
      /**
       * East-West position
       */
      longitude?: number | null;
    };
    /**
     * Additional location context
     */
    neighborhood?: {
      /**
       * Neighborhood or district name
       */
      area?: string | null;
      /**
       * Notable places near the property
       */
      landmarks?:
        | {
            name?: string | null;
            distance?: number | null;
            id?: string | null;
          }[]
        | null;
    };
  };
  /**
   * Detailed property specifications and measurements
   */
  specs: {
    /**
     * Size and area measurements
     */
    dimensions: {
      /**
       * Interior living space in square meters
       */
      property_size: number;
      /**
       * Total land area in square meters
       */
      block_size?: number | null;
      /**
       * Property frontage in meters
       */
      frontage?: number | null;
      /**
       * Property depth in meters
       */
      depth?: number | null;
    };
    /**
     * Number of rooms and spaces
     */
    rooms: {
      /**
       * Number of bedrooms
       */
      num_bedrooms: number;
      /**
       * Number of bathrooms (0.5 = powder room)
       */
      num_bathrooms: number;
      /**
       * Number of car parking spaces
       */
      num_carspaces?: number | null;
      /**
       * Number of floors in the property
       */
      num_floors?: number | null;
    };
    /**
     * Building specifications and age
     */
    construction?: {
      /**
       * Year the property was constructed
       */
      year_built?: number | null;
      /**
       * Year of last major renovation
       */
      last_renovated?: number | null;
      /**
       * Primary construction material/method
       */
      construction_type?: ('brick' | 'timber' | 'concrete' | 'steel' | 'mixed') | null;
    };
    /**
     * Property systems and ratings
     */
    utilities?: {
      /**
       * Energy efficiency rating
       */
      energy_rating?: ('A' | 'B' | 'C' | 'D' | 'E') | null;
      heating_type?: ('central' | 'electric' | 'gas' | 'heat-pump' | 'none') | null;
      cooling_type?: ('central' | 'split' | 'window' | 'none') | null;
    };
  };
  /**
   * Select all amenities available in this property
   */
  amenities?: (number | Amenity)[] | null;
  /**
   * Upload and manage property images and virtual tours
   */
  gallery: {
    /**
     * Upload up to 24 high-quality images (min 1200x800px recommended)
     */
    images: (number | Media)[];
    /**
     * Configure the primary image display
     */
    mainImage?: {
      /**
       * Automatically use the first image as the main property image
       */
      useFirstImage?: boolean | null;
      /**
       * Select which image to use as main (1-24)
       */
      mainImageIndex?: number | null;
    };
    /**
     * Add virtual tour content
     */
    virtualTour?: {
      /**
       * Upload a walkthrough video (MP4 format recommended)
       */
      video?: (number | null) | Media;
      /**
       * External virtual tour link (e.g., Matterport, etc.)
       */
      virtualTourUrl?: string | null;
    };
    /**
     * Upload relevant property documents
     */
    documents?: {
      /**
       * Upload floor plan documents (PDF format recommended)
       */
      floorPlan?: (number | Media)[] | null;
      /**
       * Upload additional property documents (brochures, certificates, etc.)
       */
      propertyDocs?: (number | Media)[] | null;
    };
  };
  categories?:
    | (
        | {
            relationTo: 'blog-categories';
            value: number | BlogCategory;
          }
        | {
            relationTo: 'property-categories';
            value: number | PropertyCategory;
          }
        | {
            relationTo: 'amenities';
            value: number | Amenity;
          }
        | {
            relationTo: 'contract-types';
            value: number | ContractType;
          }
        | {
            relationTo: 'availability';
            value: number | Availability;
          }
      )[]
    | null;
  tags?: (number | Tag)[] | null;
  meta?: Meta;
  /**
   * When checked, this page will not appear in search engines like Google. Use this for private pages or temporary content that should not be publicly searchable.
   */
  noindex?: boolean | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        username?: string | null;
      }[]
    | null;
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Define different categories of properties (house, apartment, etc.)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "property-categories".
 */
export interface PropertyCategory {
  id: number;
  /**
   * Name of the property category
   */
  title: string;
  /**
   * The primary classification of this property type
   */
  category: 'residential' | 'commercial' | 'industrial' | 'land';
  /**
   * Describe this type of property
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  specifications?: {
    /**
     * Does this type typically have multiple units? (e.g., apartment buildings)
     */
    hasUnits?: boolean | null;
    /**
     * Is this a land-only property type?
     */
    isLandOnly?: boolean | null;
    /**
     * What is the typical size range for this type?
     */
    typicalSize?: ('small' | 'medium' | 'large' | 'xlarge') | null;
    /**
     * Primary market segment for this type
     */
    market?: ('economy' | 'mid-market' | 'luxury' | 'ultra-luxury') | null;
  };
  display: {
    /**
     * Representative image for this property category
     */
    image: number | Media;
    /**
     * Order in which this category appears in lists (0 = first)
     */
    displayOrder?: number | null;
  };
  /**
   * Properties of this category (automatically populated)
   */
  properties?: {
    docs?: (number | Property)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  tags?: (number | Tag)[] | null;
  meta?: Meta;
  /**
   * When checked, this page will not appear in search engines like Google. Use this for private pages or temporary content that should not be publicly searchable.
   */
  noindex?: boolean | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        username?: string | null;
      }[]
    | null;
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | PropertyCategory;
  breadcrumbs?:
    | {
        doc?: (number | null) | PropertyCategory;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  /**
   * For SEO and accessibility
   */
  alt?: string | null;
  /**
   * Custom caption for the image
   */
  caption?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  tags?: (number | Tag)[] | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    original?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    square?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    small?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    medium?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    large?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    xlarge?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    og?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags".
 */
export interface Tag {
  id: number;
  title: string;
  /**
   * Optional
   */
  image?: (number | null) | Media;
  /**
   * Optional
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  pages?: {
    docs?: (number | Page)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  blog?: {
    docs?: (number | Blog)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages".
 */
export interface Page {
  id: number;
  title: string;
  heros: HerosInterface;
  blocks?:
    | (CallToActionBlock | ContentBlock | MediaBlock | ArchiveBlock | FormBlock | ListingBlock | ListingArchiveBlock)[]
    | null;
  categories?:
    | (
        | {
            relationTo: 'blog-categories';
            value: number | BlogCategory;
          }
        | {
            relationTo: 'property-categories';
            value: number | PropertyCategory;
          }
        | {
            relationTo: 'amenities';
            value: number | Amenity;
          }
        | {
            relationTo: 'contract-types';
            value: number | ContractType;
          }
        | {
            relationTo: 'availability';
            value: number | Availability;
          }
      )[]
    | null;
  tags?: (number | Tag)[] | null;
  meta?: Meta;
  /**
   * When checked, this page will not appear in search engines like Google. Use this for private pages or temporary content that should not be publicly searchable.
   */
  noindex?: boolean | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        username?: string | null;
      }[]
    | null;
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "herosInterface".
 */
export interface HerosInterface {
  type: 'none' | 'highImpact' | 'mediumImpact' | 'lowImpact' | 'advancedComponents';
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'blog';
                value: number | Blog;
              } | null)
            | ({
                relationTo: 'properties';
                value: number | Property;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  media?: (number | null) | Media;
  searchComponent?: {
    enablePropertyStatus?: boolean | null;
    enablePropertyType?: boolean | null;
    enableRooms?: boolean | null;
    enableBeds?: boolean | null;
    enableBaths?: boolean | null;
    priceRange?: {
      enabled?: boolean | null;
      min?: number | null;
      max?: number | null;
    };
    areaRange?: {
      enabled?: boolean | null;
      min?: number | null;
      max?: number | null;
    };
    button?: {
      label?: string | null;
      style?: ('primary' | 'secondary') | null;
      icon?: ('house' | 'booking' | 'garage') | null;
    };
  };
  iconGrid?:
    | {
        icon?:
          | (
              | 'house'
              | 'booking'
              | 'garage'
              | 'bath'
              | 'bed'
              | 'area'
              | 'price'
              | 'rooms'
              | 'parking'
              | 'pool'
              | 'garden'
              | 'land'
              | 'other'
            )
          | null;
        label?: string | null;
        /**
         * Optional link when clicking the icon
         */
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'blog';
                value: number | Blog;
              } | null)
            | ({
                relationTo: 'properties';
                value: number | Property;
              } | null);
          url?: string | null;
        };
        id?: string | null;
      }[]
    | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog".
 */
export interface Blog {
  id: number;
  title: string;
  heroImage?: (number | null) | Media;
  content?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  categories?:
    | (
        | {
            relationTo: 'blog-categories';
            value: number | BlogCategory;
          }
        | {
            relationTo: 'property-categories';
            value: number | PropertyCategory;
          }
        | {
            relationTo: 'amenities';
            value: number | Amenity;
          }
        | {
            relationTo: 'contract-types';
            value: number | ContractType;
          }
        | {
            relationTo: 'availability';
            value: number | Availability;
          }
      )[]
    | null;
  /**
   * Content that are related to this one. Could be a page, or post, that you would like to feature in this document.
   */
  relatedDocs?:
    | (
        | {
            relationTo: 'pages';
            value: number | Page;
          }
        | {
            relationTo: 'blog';
            value: number | Blog;
          }
        | {
            relationTo: 'properties';
            value: number | Property;
          }
      )[]
    | null;
  tags?: (number | Tag)[] | null;
  meta?: Meta;
  /**
   * When checked, this page will not appear in search engines like Google. Use this for private pages or temporary content that should not be publicly searchable.
   */
  noindex?: boolean | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        username?: string | null;
      }[]
    | null;
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-categories".
 */
export interface BlogCategory {
  id: number;
  title: string;
  /**
   * Optional
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  records?: {
    docs?: (number | Blog)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | BlogCategory;
  breadcrumbs?:
    | {
        doc?: (number | null) | BlogCategory;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * Manage property amenities and features that can be assigned to properties
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "amenities".
 */
export interface Amenity {
  id: number;
  /**
   * Name of the amenity or feature
   */
  title: string;
  /**
   * Group similar amenities together
   */
  category: 'interior' | 'exterior' | 'security' | 'community' | 'utilities' | 'smart-home';
  /**
   * Brief description of this amenity and its benefits
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  /**
   * Upload an icon or representative image
   */
  image: number | Media;
  /**
   * Mark if this is a premium or luxury amenity
   */
  isPremium?: boolean | null;
  displayOptions?: {
    /**
     * Control where this amenity appears in lists
     */
    displayPriority?: ('high' | 'normal' | 'low') | null;
    /**
     * Allow users to filter properties by this amenity
     */
    showInFilters?: boolean | null;
  };
  /**
   * Add any specific details about this amenity
   */
  specifications?:
    | {
        label: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  /**
   * Properties that have this amenity (automatically populated)
   */
  properties?: {
    docs?: (number | Property)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  tags?: (number | Tag)[] | null;
  meta?: Meta;
  /**
   * When checked, this page will not appear in search engines like Google. Use this for private pages or temporary content that should not be publicly searchable.
   */
  noindex?: boolean | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        username?: string | null;
      }[]
    | null;
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Amenity;
  breadcrumbs?:
    | {
        doc?: (number | null) | Amenity;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meta".
 */
export interface Meta {
  title?: string | null;
  /**
   * Maximum upload file size: 12MB. Recommended file size for images is <500KB.
   */
  image?: (number | null) | Media;
  description?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  photo?: (number | null) | UserPhoto;
  firstName?: string | null;
  lastName?: string | null;
  role: 'admin' | 'editor' | 'public';
  updatedAt: string;
  createdAt: string;
  email: string;
  username: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  _verified?: boolean | null;
  _verificationToken?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-photos".
 */
export interface UserPhoto {
  id: number;
  alt?: string | null;
  user?: {
    docs?: (number | User)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    avatar?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    original?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * Define different types of property transactions (sale, rent, lease, etc.)
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contract-types".
 */
export interface ContractType {
  id: number;
  /**
   * Name of the sale type
   */
  title: string;
  /**
   * The general category this transaction type belongs to
   */
  transactionCategory: 'sale' | 'rental' | 'lease' | 'investment';
  /**
   * Explain this type of transaction
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  requirements?: {
    /**
     * Does this transaction type require a deposit?
     */
    requiresDeposit?: boolean | null;
    /**
     * Does this transaction type require a formal contract?
     */
    requiresContract?: boolean | null;
  };
  display?: {
    /**
     * How should the price be labeled?
     */
    priceLabel?: ('price' | 'rent-month' | 'rent-year' | 'starting-from') | null;
    /**
     * Order in which this type appears in lists (0 = first)
     */
    displayOrder?: number | null;
  };
  /**
   * Icon or representative image for this sale type
   */
  image?: (number | null) | Media;
  /**
   * Properties using this contract type (automatically populated)
   */
  properties?: {
    docs?: (number | Property)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  tags?: (number | Tag)[] | null;
  meta?: Meta;
  /**
   * When checked, this page will not appear in search engines like Google. Use this for private pages or temporary content that should not be publicly searchable.
   */
  noindex?: boolean | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        username?: string | null;
      }[]
    | null;
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | ContractType;
  breadcrumbs?:
    | {
        doc?: (number | null) | ContractType;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * Define and manage different states a property listing can have
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "availability".
 */
export interface Availability {
  id: number;
  /**
   * Name of the listing status
   */
  title: string;
  /**
   * The general category this status belongs to
   */
  statusType: 'active' | 'pending' | 'closed' | 'off-market';
  /**
   * Explain when this status should be used
   */
  description?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  display: {
    /**
     * Color used to visually identify this status
     */
    color: 'green' | 'blue' | 'yellow' | 'red' | 'gray';
    /**
     * Order in which this status appears in lists (0 = first)
     */
    displayOrder?: number | null;
  };
  behavior?: {
    /**
     * Can users make inquiries about properties with this status?
     */
    allowInquiries?: boolean | null;
    /**
     * Should properties with this status appear in search results?
     */
    showInSearch?: boolean | null;
  };
  /**
   * Properties currently in this status (automatically populated)
   */
  properties?: {
    docs?: (number | Property)[] | null;
    hasNextPage?: boolean | null;
  } | null;
  tags?: (number | Tag)[] | null;
  meta?: Meta;
  /**
   * When checked, this page will not appear in search engines like Google. Use this for private pages or temporary content that should not be publicly searchable.
   */
  noindex?: boolean | null;
  authors?: (number | User)[] | null;
  populatedAuthors?:
    | {
        id?: string | null;
        username?: string | null;
      }[]
    | null;
  publishedAt?: string | null;
  slug?: string | null;
  slugLock?: boolean | null;
  parent?: (number | null) | Availability;
  breadcrumbs?:
    | {
        doc?: (number | null) | Availability;
        url?: string | null;
        label?: string | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
  _status?: ('draft' | 'published') | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock".
 */
export interface CallToActionBlock {
  richText?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  links?:
    | {
        link: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'blog';
                value: number | Blog;
              } | null)
            | ({
                relationTo: 'properties';
                value: number | Property;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'cta';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock".
 */
export interface ContentBlock {
  columns?:
    | {
        size?: ('oneThird' | 'half' | 'twoThirds' | 'full') | null;
        richText?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        enableLink?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'blog';
                value: number | Blog;
              } | null)
            | ({
                relationTo: 'properties';
                value: number | Property;
              } | null);
          url?: string | null;
          label: string;
          /**
           * Choose how the link should be rendered.
           */
          appearance?: ('default' | 'outline') | null;
        };
        id?: string | null;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'content';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock".
 */
export interface MediaBlock {
  media: number | Media;
  id?: string | null;
  blockName?: string | null;
  blockType: 'mediaBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock".
 */
export interface ArchiveBlock {
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  populateBy?: ('collection' | 'selection') | null;
  relationTo?: 'blog' | null;
  categories?: (number | BlogCategory)[] | null;
  limit?: number | null;
  selectedDocs?:
    | {
        relationTo: 'blog';
        value: number | Blog;
      }[]
    | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'archive';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock".
 */
export interface FormBlock {
  form: number | Form;
  enableIntro?: boolean | null;
  introContent?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  id?: string | null;
  blockName?: string | null;
  blockType: 'formBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms".
 */
export interface Form {
  id: number;
  title: string;
  fields?:
    | (
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            defaultValue?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'checkbox';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'country';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'email';
          }
        | {
            message?: {
              root: {
                type: string;
                children: {
                  type: string;
                  version: number;
                  [k: string]: unknown;
                }[];
                direction: ('ltr' | 'rtl') | null;
                format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                indent: number;
                version: number;
              };
              [k: string]: unknown;
            } | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'message';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'number';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            options?:
              | {
                  label: string;
                  value: string;
                  id?: string | null;
                }[]
              | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'select';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'state';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'text';
          }
        | {
            name: string;
            label?: string | null;
            width?: number | null;
            defaultValue?: string | null;
            required?: boolean | null;
            id?: string | null;
            blockName?: string | null;
            blockType: 'textarea';
          }
      )[]
    | null;
  submitButtonLabel?: string | null;
  /**
   * Choose whether to display an on-page message or redirect to a different page after they submit the form.
   */
  confirmationType?: ('message' | 'redirect') | null;
  confirmationMessage?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  redirect?: {
    url: string;
  };
  /**
   * Send custom emails when the form submits. Use comma separated lists to send the same email to multiple recipients. To reference a value from this form, wrap that field's name with double curly brackets, i.e. {{firstName}}. You can use a wildcard {{*}} to output all data and {{*:table}} to format it as an HTML table in the email.
   */
  emails?:
    | {
        emailTo?: string | null;
        cc?: string | null;
        bcc?: string | null;
        replyTo?: string | null;
        emailFrom?: string | null;
        subject: string;
        /**
         * Enter the message that should be sent in this email.
         */
        message?: {
          root: {
            type: string;
            children: {
              type: string;
              version: number;
              [k: string]: unknown;
            }[];
            direction: ('ltr' | 'rtl') | null;
            format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
            indent: number;
            version: number;
          };
          [k: string]: unknown;
        } | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ListingBlock".
 */
export interface ListingBlock {
  /**
   * Note: By default, the latest listings are displayed. This setting will override that behavior.
   */
  listings?: (number | Property)[] | null;
  view: ViewSettingsInterface;
  card: CardSettingsInterface;
  id?: string | null;
  blockName?: string | null;
  blockType: 'listingBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ViewSettingsInterface".
 */
export interface ViewSettingsInterface {
  /**
   * Select the fields that should be displayed in the listing card.
   */
  layout: 'grid' | 'list' | 'ftrd' | 'crsl';
  grid?: {
    columns?: number | null;
  };
  list?: {
    columns?: number | null;
  };
  ftrd?: {
    columns?: number | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CardSettingsInterface".
 */
export interface CardSettingsInterface {
  /**
   * Select the fields that should be displayed in the listing card.
   */
  enabledFields: (
    | 'price'
    | 'bedrooms'
    | 'bathrooms'
    | 'lotSize'
    | 'yearBuilt'
    | 'areaSize'
    | 'parkingSpaces'
    | 'description'
    | 'categories'
    | 'thumbnail'
    | 'tags'
  )[];
  thumbnail?: {
    fit?: ('cover' | 'contain' | 'fill') | null;
    position?: ('top' | 'center' | 'bottom') | null;
    size?: ('small' | 'medium' | 'large') | null;
  };
  price?: {
    decimals?: ('none' | 'one' | 'two') | null;
    currencyFormat?: ('text' | 'symbol') | null;
    overrideGlobalCurrency?: ('yes' | 'no') | null;
    currencySelect?:
      | (
          | 'د.إ'
          | 'AU$'
          | 'R$'
          | 'CA$'
          | 'CHF'
          | 'CN¥'
          | '€'
          | '£'
          | 'HK$'
          | '₹'
          | '¥'
          | 'MX$'
          | 'NZ$'
          | '₽'
          | 'SG$'
          | '฿'
          | 'US$'
          | '₫'
          | 'R'
        )
      | null;
  };
  tags?: {
    buttonStyle?: ('primary' | 'secondary' | 'outline') | null;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ListingArchiveBlock".
 */
export interface ListingArchiveBlock {
  mainTitle?: string | null;
  /**
   * Optional
   */
  subTitle?: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  } | null;
  layout?: {
    layoutType?: ('grid' | 'list' | 'carousel') | null;
  };
  archive?: {
    populateBy?: ('latest' | 'custom') | null;
    /**
     * Select the listings to display
     */
    selection?: (number | Property)[] | null;
    /**
     * Select the categories to display
     */
    categories?:
      | (
          | {
              relationTo: 'blog-categories';
              value: number | BlogCategory;
            }
          | {
              relationTo: 'property-categories';
              value: number | PropertyCategory;
            }
          | {
              relationTo: 'amenities';
              value: number | Amenity;
            }
          | {
              relationTo: 'contract-types';
              value: number | ContractType;
            }
          | {
              relationTo: 'availability';
              value: number | Availability;
            }
        )[]
      | null;
    /**
     * Limit the number of listings to display. (Min: 1, Max: 54)
     */
    limit?: number | null;
    /**
     * Pagination behavior
     */
    pagination?: ('paginated' | 'loadMore') | null;
  };
  card?: ListingCardOptions;
  id?: string | null;
  blockName?: string | null;
  blockType: 'listingArchiveBlock';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ListingCardOptions".
 */
export interface ListingCardOptions {
  /**
   * Select the fields that should be displayed in the listing card.
   */
  enabledFields?:
    | (
        | 'price'
        | 'bedrooms'
        | 'bathrooms'
        | 'lotSize'
        | 'yearBuilt'
        | 'areaSize'
        | 'parkingSpaces'
        | 'description'
        | 'categories'
        | 'thumbnail'
        | 'tags'
      )[]
    | null;
  buttonStyle?: ('primary' | 'secondary' | 'outline') | null;
  fit?: ('cover' | 'contain' | 'fill') | null;
  position?: ('top' | 'center' | 'bottom') | null;
  size?: ('small' | 'medium' | 'large') | null;
  decimals?: ('none' | 'one' | 'two') | null;
  currencyFormat?: ('text' | 'symbol') | null;
  overrideGlobalCurrency?: ('yes' | 'no') | null;
  currencySelect?:
    | (
        | 'د.إ'
        | 'AU$'
        | 'R$'
        | 'CA$'
        | 'CHF'
        | 'CN¥'
        | '€'
        | '£'
        | 'HK$'
        | '₹'
        | '¥'
        | 'MX$'
        | 'NZ$'
        | '₽'
        | 'SG$'
        | '฿'
        | 'US$'
        | '₫'
        | 'R'
      )
    | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assets".
 */
export interface Asset {
  id: number;
  /**
   * Used for SEO and accessibility
   */
  alt?: string | null;
  /**
   * Dark variation of the asset for dark mode. (Optional)
   */
  assetDarkModeFallback?: (number | null) | Asset;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This is a collection of automatically created search results. These results are used by the global site search and will be updated automatically as documents in the CMS are created or updated.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search".
 */
export interface Search {
  id: number;
  title?: string | null;
  priority?: number | null;
  doc: {
    relationTo: 'blog';
    value: number | Blog;
  };
  slug?: string | null;
  meta?: {
    title?: string | null;
    description?: string | null;
    image?: (number | null) | Media;
  };
  categories?:
    | {
        relationTo?: string | null;
        id?: string | null;
        title?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions".
 */
export interface FormSubmission {
  id: number;
  form: number | Form;
  submissionData?:
    | {
        field: string;
        value: string;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects".
 */
export interface Redirect {
  id: number;
  /**
   * You will need to rebuild the website when changing this field.
   */
  from: string;
  to?: {
    type?: ('reference' | 'custom') | null;
    reference?:
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'blog';
          value: number | Blog;
        } | null)
      | ({
          relationTo: 'properties';
          value: number | Property;
        } | null);
    url?: string | null;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs".
 */
export interface PayloadJob {
  id: number;
  /**
   * Input data provided to the job
   */
  input?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  taskStatus?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  completedAt?: string | null;
  totalTried?: number | null;
  /**
   * If hasError is true this job will not be retried
   */
  hasError?: boolean | null;
  /**
   * If hasError is true, this is the error that caused it
   */
  error?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  /**
   * Task execution log
   */
  log?:
    | {
        executedAt: string;
        completedAt: string;
        taskSlug: 'inline' | 'schedulePublish';
        taskID: string;
        input?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        output?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        state: 'failed' | 'succeeded';
        error?:
          | {
              [k: string]: unknown;
            }
          | unknown[]
          | string
          | number
          | boolean
          | null;
        id?: string | null;
      }[]
    | null;
  taskSlug?: ('inline' | 'schedulePublish') | null;
  queue?: string | null;
  waitUntil?: string | null;
  processing?: boolean | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'properties';
        value: number | Property;
      } | null)
    | ({
        relationTo: 'property-categories';
        value: number | PropertyCategory;
      } | null)
    | ({
        relationTo: 'amenities';
        value: number | Amenity;
      } | null)
    | ({
        relationTo: 'availability';
        value: number | Availability;
      } | null)
    | ({
        relationTo: 'contract-types';
        value: number | ContractType;
      } | null)
    | ({
        relationTo: 'pages';
        value: number | Page;
      } | null)
    | ({
        relationTo: 'blog';
        value: number | Blog;
      } | null)
    | ({
        relationTo: 'blog-categories';
        value: number | BlogCategory;
      } | null)
    | ({
        relationTo: 'tags';
        value: number | Tag;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'assets';
        value: number | Asset;
      } | null)
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'user-photos';
        value: number | UserPhoto;
      } | null)
    | ({
        relationTo: 'search';
        value: number | Search;
      } | null)
    | ({
        relationTo: 'forms';
        value: number | Form;
      } | null)
    | ({
        relationTo: 'form-submissions';
        value: number | FormSubmission;
      } | null)
    | ({
        relationTo: 'redirects';
        value: number | Redirect;
      } | null)
    | ({
        relationTo: 'payload-jobs';
        value: number | PayloadJob;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "properties_select".
 */
export interface PropertiesSelect<T extends boolean = true> {
  title?: T;
  price?: T;
  isFeatured?: T;
  description?: T;
  propertyCategory?: T;
  contractType?: T;
  availability?: T;
  location?:
    | T
    | {
        address_line1?: T;
        unit?: T;
        address_line2?: T;
        city?: T;
        state?: T;
        postcode?: T;
        country?: T;
        coordinates?:
          | T
          | {
              latitude?: T;
              longitude?: T;
            };
        neighborhood?:
          | T
          | {
              area?: T;
              landmarks?:
                | T
                | {
                    name?: T;
                    distance?: T;
                    id?: T;
                  };
            };
      };
  specs?:
    | T
    | {
        dimensions?:
          | T
          | {
              property_size?: T;
              block_size?: T;
              frontage?: T;
              depth?: T;
            };
        rooms?:
          | T
          | {
              num_bedrooms?: T;
              num_bathrooms?: T;
              num_carspaces?: T;
              num_floors?: T;
            };
        construction?:
          | T
          | {
              year_built?: T;
              last_renovated?: T;
              construction_type?: T;
            };
        utilities?:
          | T
          | {
              energy_rating?: T;
              heating_type?: T;
              cooling_type?: T;
            };
      };
  amenities?: T;
  gallery?:
    | T
    | {
        images?: T;
        mainImage?:
          | T
          | {
              useFirstImage?: T;
              mainImageIndex?: T;
            };
        virtualTour?:
          | T
          | {
              video?: T;
              virtualTourUrl?: T;
            };
        documents?:
          | T
          | {
              floorPlan?: T;
              propertyDocs?: T;
            };
      };
  categories?: T;
  tags?: T;
  meta?: T | MetaSelect<T>;
  noindex?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        username?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "meta_select".
 */
export interface MetaSelect<T extends boolean = true> {
  title?: T;
  image?: T;
  description?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "property-categories_select".
 */
export interface PropertyCategoriesSelect<T extends boolean = true> {
  title?: T;
  category?: T;
  description?: T;
  specifications?:
    | T
    | {
        hasUnits?: T;
        isLandOnly?: T;
        typicalSize?: T;
        market?: T;
      };
  display?:
    | T
    | {
        image?: T;
        displayOrder?: T;
      };
  properties?: T;
  tags?: T;
  meta?: T | MetaSelect<T>;
  noindex?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        username?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "amenities_select".
 */
export interface AmenitiesSelect<T extends boolean = true> {
  title?: T;
  category?: T;
  description?: T;
  image?: T;
  isPremium?: T;
  displayOptions?:
    | T
    | {
        displayPriority?: T;
        showInFilters?: T;
      };
  specifications?:
    | T
    | {
        label?: T;
        value?: T;
        id?: T;
      };
  properties?: T;
  tags?: T;
  meta?: T | MetaSelect<T>;
  noindex?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        username?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "availability_select".
 */
export interface AvailabilitySelect<T extends boolean = true> {
  title?: T;
  statusType?: T;
  description?: T;
  display?:
    | T
    | {
        color?: T;
        displayOrder?: T;
      };
  behavior?:
    | T
    | {
        allowInquiries?: T;
        showInSearch?: T;
      };
  properties?: T;
  tags?: T;
  meta?: T | MetaSelect<T>;
  noindex?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        username?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "contract-types_select".
 */
export interface ContractTypesSelect<T extends boolean = true> {
  title?: T;
  transactionCategory?: T;
  description?: T;
  requirements?:
    | T
    | {
        requiresDeposit?: T;
        requiresContract?: T;
      };
  display?:
    | T
    | {
        priceLabel?: T;
        displayOrder?: T;
      };
  image?: T;
  properties?: T;
  tags?: T;
  meta?: T | MetaSelect<T>;
  noindex?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        username?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "pages_select".
 */
export interface PagesSelect<T extends boolean = true> {
  title?: T;
  heros?: T | HerosInterfaceSelect<T>;
  blocks?:
    | T
    | {
        cta?: T | CallToActionBlockSelect<T>;
        content?: T | ContentBlockSelect<T>;
        mediaBlock?: T | MediaBlockSelect<T>;
        archive?: T | ArchiveBlockSelect<T>;
        formBlock?: T | FormBlockSelect<T>;
        listingBlock?: T | ListingBlockSelect<T>;
        listingArchiveBlock?: T | ListingArchiveBlockSelect<T>;
      };
  categories?: T;
  tags?: T;
  meta?: T | MetaSelect<T>;
  noindex?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        username?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "herosInterface_select".
 */
export interface HerosInterfaceSelect<T extends boolean = true> {
  type?: T;
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  media?: T;
  searchComponent?:
    | T
    | {
        enablePropertyStatus?: T;
        enablePropertyType?: T;
        enableRooms?: T;
        enableBeds?: T;
        enableBaths?: T;
        priceRange?:
          | T
          | {
              enabled?: T;
              min?: T;
              max?: T;
            };
        areaRange?:
          | T
          | {
              enabled?: T;
              min?: T;
              max?: T;
            };
        button?:
          | T
          | {
              label?: T;
              style?: T;
              icon?: T;
            };
      };
  iconGrid?:
    | T
    | {
        icon?: T;
        label?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
            };
        id?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CallToActionBlock_select".
 */
export interface CallToActionBlockSelect<T extends boolean = true> {
  richText?: T;
  links?:
    | T
    | {
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ContentBlock_select".
 */
export interface ContentBlockSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        size?: T;
        richText?: T;
        enableLink?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
              appearance?: T;
            };
        id?: T;
      };
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "MediaBlock_select".
 */
export interface MediaBlockSelect<T extends boolean = true> {
  media?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ArchiveBlock_select".
 */
export interface ArchiveBlockSelect<T extends boolean = true> {
  introContent?: T;
  populateBy?: T;
  relationTo?: T;
  categories?: T;
  limit?: T;
  selectedDocs?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "FormBlock_select".
 */
export interface FormBlockSelect<T extends boolean = true> {
  form?: T;
  enableIntro?: T;
  introContent?: T;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ListingBlock_select".
 */
export interface ListingBlockSelect<T extends boolean = true> {
  listings?: T;
  view?: T | ViewSettingsInterfaceSelect<T>;
  card?: T | CardSettingsInterfaceSelect<T>;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ViewSettingsInterface_select".
 */
export interface ViewSettingsInterfaceSelect<T extends boolean = true> {
  layout?: T;
  grid?:
    | T
    | {
        columns?: T;
      };
  list?:
    | T
    | {
        columns?: T;
      };
  ftrd?:
    | T
    | {
        columns?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CardSettingsInterface_select".
 */
export interface CardSettingsInterfaceSelect<T extends boolean = true> {
  enabledFields?: T;
  thumbnail?:
    | T
    | {
        fit?: T;
        position?: T;
        size?: T;
      };
  price?:
    | T
    | {
        decimals?: T;
        currencyFormat?: T;
        overrideGlobalCurrency?: T;
        currencySelect?: T;
      };
  tags?:
    | T
    | {
        buttonStyle?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ListingArchiveBlock_select".
 */
export interface ListingArchiveBlockSelect<T extends boolean = true> {
  mainTitle?: T;
  subTitle?: T;
  layout?:
    | T
    | {
        layoutType?: T;
      };
  archive?:
    | T
    | {
        populateBy?: T;
        selection?: T;
        categories?: T;
        limit?: T;
        pagination?: T;
      };
  card?: T | ListingCardOptionsSelect<T>;
  id?: T;
  blockName?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "ListingCardOptions_select".
 */
export interface ListingCardOptionsSelect<T extends boolean = true> {
  enabledFields?: T;
  buttonStyle?: T;
  fit?: T;
  position?: T;
  size?: T;
  decimals?: T;
  currencyFormat?: T;
  overrideGlobalCurrency?: T;
  currencySelect?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog_select".
 */
export interface BlogSelect<T extends boolean = true> {
  title?: T;
  heroImage?: T;
  content?: T;
  categories?: T;
  relatedDocs?: T;
  tags?: T;
  meta?: T | MetaSelect<T>;
  noindex?: T;
  authors?: T;
  populatedAuthors?:
    | T
    | {
        id?: T;
        username?: T;
      };
  publishedAt?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "blog-categories_select".
 */
export interface BlogCategoriesSelect<T extends boolean = true> {
  title?: T;
  description?: T;
  records?: T;
  slug?: T;
  slugLock?: T;
  parent?: T;
  breadcrumbs?:
    | T
    | {
        doc?: T;
        url?: T;
        label?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "tags_select".
 */
export interface TagsSelect<T extends boolean = true> {
  title?: T;
  image?: T;
  description?: T;
  pages?: T;
  blog?: T;
  slug?: T;
  slugLock?: T;
  updatedAt?: T;
  createdAt?: T;
  _status?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  caption?: T;
  tags?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        original?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        square?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        small?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        medium?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        large?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        xlarge?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        og?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "assets_select".
 */
export interface AssetsSelect<T extends boolean = true> {
  alt?: T;
  assetDarkModeFallback?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  photo?: T;
  firstName?: T;
  lastName?: T;
  role?: T;
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  username?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  _verified?: T;
  _verificationToken?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "user-photos_select".
 */
export interface UserPhotosSelect<T extends boolean = true> {
  alt?: T;
  user?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        avatar?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        original?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "search_select".
 */
export interface SearchSelect<T extends boolean = true> {
  title?: T;
  priority?: T;
  doc?: T;
  slug?: T;
  meta?:
    | T
    | {
        title?: T;
        description?: T;
        image?: T;
      };
  categories?:
    | T
    | {
        relationTo?: T;
        id?: T;
        title?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "forms_select".
 */
export interface FormsSelect<T extends boolean = true> {
  title?: T;
  fields?:
    | T
    | {
        checkbox?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              defaultValue?: T;
              id?: T;
              blockName?: T;
            };
        country?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        email?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        message?:
          | T
          | {
              message?: T;
              id?: T;
              blockName?: T;
            };
        number?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        select?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              options?:
                | T
                | {
                    label?: T;
                    value?: T;
                    id?: T;
                  };
              required?: T;
              id?: T;
              blockName?: T;
            };
        state?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        text?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
        textarea?:
          | T
          | {
              name?: T;
              label?: T;
              width?: T;
              defaultValue?: T;
              required?: T;
              id?: T;
              blockName?: T;
            };
      };
  submitButtonLabel?: T;
  confirmationType?: T;
  confirmationMessage?: T;
  redirect?:
    | T
    | {
        url?: T;
      };
  emails?:
    | T
    | {
        emailTo?: T;
        cc?: T;
        bcc?: T;
        replyTo?: T;
        emailFrom?: T;
        subject?: T;
        message?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "form-submissions_select".
 */
export interface FormSubmissionsSelect<T extends boolean = true> {
  form?: T;
  submissionData?:
    | T
    | {
        field?: T;
        value?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "redirects_select".
 */
export interface RedirectsSelect<T extends boolean = true> {
  from?: T;
  to?:
    | T
    | {
        type?: T;
        reference?: T;
        url?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-jobs_select".
 */
export interface PayloadJobsSelect<T extends boolean = true> {
  input?: T;
  taskStatus?: T;
  completedAt?: T;
  totalTried?: T;
  hasError?: T;
  error?: T;
  log?:
    | T
    | {
        executedAt?: T;
        completedAt?: T;
        taskSlug?: T;
        taskID?: T;
        input?: T;
        output?: T;
        state?: T;
        error?: T;
        id?: T;
      };
  taskSlug?: T;
  queue?: T;
  waitUntil?: T;
  processing?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "main-menu".
 */
export interface MainMenu {
  id: number;
  navGroups?:
    | {
        groupLabel: string;
        /**
         * If enabled, this group will link directly to the provided URL.
         */
        enableDirectLink?: boolean | null;
        /**
         * If enabled, this group will display a dropdown menu with multiple options & links.
         */
        enableDropdown?: boolean | null;
        link?: {
          type?: ('reference' | 'custom') | null;
          newTab?: boolean | null;
          reference?:
            | ({
                relationTo: 'pages';
                value: number | Page;
              } | null)
            | ({
                relationTo: 'blog';
                value: number | Blog;
              } | null)
            | ({
                relationTo: 'properties';
                value: number | Property;
              } | null);
          url?: string | null;
        };
        dscrpArea?: {
          /**
           * If enabled, this group will display a dropdown menu with multiple options & links.
           */
          enable?: boolean | null;
          /**
           * Describe the group and its contents.
           */
          text?: {
            root: {
              type: string;
              children: {
                type: string;
                version: number;
                [k: string]: unknown;
              }[];
              direction: ('ltr' | 'rtl') | null;
              format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
              indent: number;
              version: number;
            };
            [k: string]: unknown;
          } | null;
          /**
           * Add links inside the description area.
           */
          links?:
            | {
                link: {
                  type?: ('reference' | 'custom') | null;
                  newTab?: boolean | null;
                  reference?:
                    | ({
                        relationTo: 'pages';
                        value: number | Page;
                      } | null)
                    | ({
                        relationTo: 'blog';
                        value: number | Blog;
                      } | null)
                    | ({
                        relationTo: 'properties';
                        value: number | Property;
                      } | null);
                  url?: string | null;
                  label: string;
                };
                id?: string | null;
              }[]
            | null;
        };
        navItems?:
          | {
              style?: ('default' | 'featured' | 'list') | null;
              defaultLink?: {
                link: {
                  type?: ('reference' | 'custom') | null;
                  newTab?: boolean | null;
                  reference?:
                    | ({
                        relationTo: 'pages';
                        value: number | Page;
                      } | null)
                    | ({
                        relationTo: 'blog';
                        value: number | Blog;
                      } | null)
                    | ({
                        relationTo: 'properties';
                        value: number | Property;
                      } | null);
                  url?: string | null;
                  label: string;
                };
                description?: string | null;
              };
              ftrdLink?: {
                tag?: string | null;
                /**
                 * Label for the featured link.
                 */
                label?: {
                  root: {
                    type: string;
                    children: {
                      type: string;
                      version: number;
                      [k: string]: unknown;
                    }[];
                    direction: ('ltr' | 'rtl') | null;
                    format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
                    indent: number;
                    version: number;
                  };
                  [k: string]: unknown;
                } | null;
                links?:
                  | {
                      link: {
                        type?: ('reference' | 'custom') | null;
                        newTab?: boolean | null;
                        reference?:
                          | ({
                              relationTo: 'pages';
                              value: number | Page;
                            } | null)
                          | ({
                              relationTo: 'blog';
                              value: number | Blog;
                            } | null)
                          | ({
                              relationTo: 'properties';
                              value: number | Property;
                            } | null);
                        url?: string | null;
                        label: string;
                      };
                      id?: string | null;
                    }[]
                  | null;
              };
              listLinks?: {
                tag?: string | null;
                links?:
                  | {
                      link: {
                        type?: ('reference' | 'custom') | null;
                        newTab?: boolean | null;
                        reference?:
                          | ({
                              relationTo: 'pages';
                              value: number | Page;
                            } | null)
                          | ({
                              relationTo: 'blog';
                              value: number | Blog;
                            } | null)
                          | ({
                              relationTo: 'properties';
                              value: number | Property;
                            } | null);
                        url?: string | null;
                        label: string;
                      };
                      id?: string | null;
                    }[]
                  | null;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  menuCta: {
    enableCta?: boolean | null;
    link: {
      type?: ('reference' | 'custom') | null;
      newTab?: boolean | null;
      reference?:
        | ({
            relationTo: 'pages';
            value: number | Page;
          } | null)
        | ({
            relationTo: 'blog';
            value: number | Blog;
          } | null)
        | ({
            relationTo: 'properties';
            value: number | Property;
          } | null);
      url?: string | null;
      label: string;
    };
  };
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer".
 */
export interface Footer {
  id: number;
  columns?:
    | {
        label: string;
        navItems?:
          | {
              link: {
                type?: ('reference' | 'custom') | null;
                newTab?: boolean | null;
                reference?:
                  | ({
                      relationTo: 'pages';
                      value: number | Page;
                    } | null)
                  | ({
                      relationTo: 'blog';
                      value: number | Blog;
                    } | null)
                  | ({
                      relationTo: 'properties';
                      value: number | Property;
                    } | null);
                url?: string | null;
                label: string;
              };
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  _status?: ('draft' | 'published') | null;
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "global-settings".
 */
export interface GlobalSetting {
  id: number;
  siteIdentity?: {
    siteName?: string | null;
    siteDescription?: string | null;
  };
  branding?: {
    /**
     * Light-colored version of your logo optimized for dark backgrounds and dark mode displays.
     */
    logo?: (number | null) | Asset;
    /**
     * Dark-colored version of your logo optimized for light backgrounds and standard displays.
     */
    logoSquare?: (number | null) | Asset;
    /**
     * The small icon that is displayed in the browser tab. Recommended size: 32x32px.
     */
    favicon?: (number | null) | Asset;
  };
  contactInfo?: {
    contactName?: string | null;
    contactEmail?: string | null;
    contactPhone?: string | null;
    contactAddress?: string | null;
    socialMedia?: {
      facebook?: string | null;
      twitter?: string | null;
      instagram?: string | null;
      linkedin?: string | null;
      youtube?: string | null;
      whatsapp?: string | null;
      telegram?: string | null;
    };
  };
  globalSeo?: {
    keywords?: string | null;
    /**
     * The image that will appear when sharing your site on social media.
     */
    ogImage?: (number | null) | Asset;
  };
  updatedAt?: string | null;
  createdAt?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "main-menu_select".
 */
export interface MainMenuSelect<T extends boolean = true> {
  navGroups?:
    | T
    | {
        groupLabel?: T;
        enableDirectLink?: T;
        enableDropdown?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
            };
        dscrpArea?:
          | T
          | {
              enable?: T;
              text?: T;
              links?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                        };
                    id?: T;
                  };
            };
        navItems?:
          | T
          | {
              style?: T;
              defaultLink?:
                | T
                | {
                    link?:
                      | T
                      | {
                          type?: T;
                          newTab?: T;
                          reference?: T;
                          url?: T;
                          label?: T;
                        };
                    description?: T;
                  };
              ftrdLink?:
                | T
                | {
                    tag?: T;
                    label?: T;
                    links?:
                      | T
                      | {
                          link?:
                            | T
                            | {
                                type?: T;
                                newTab?: T;
                                reference?: T;
                                url?: T;
                                label?: T;
                              };
                          id?: T;
                        };
                  };
              listLinks?:
                | T
                | {
                    tag?: T;
                    links?:
                      | T
                      | {
                          link?:
                            | T
                            | {
                                type?: T;
                                newTab?: T;
                                reference?: T;
                                url?: T;
                                label?: T;
                              };
                          id?: T;
                        };
                  };
              id?: T;
            };
        id?: T;
      };
  menuCta?:
    | T
    | {
        enableCta?: T;
        link?:
          | T
          | {
              type?: T;
              newTab?: T;
              reference?: T;
              url?: T;
              label?: T;
            };
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "footer_select".
 */
export interface FooterSelect<T extends boolean = true> {
  columns?:
    | T
    | {
        label?: T;
        navItems?:
          | T
          | {
              link?:
                | T
                | {
                    type?: T;
                    newTab?: T;
                    reference?: T;
                    url?: T;
                    label?: T;
                  };
              id?: T;
            };
        id?: T;
      };
  _status?: T;
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "global-settings_select".
 */
export interface GlobalSettingsSelect<T extends boolean = true> {
  siteIdentity?:
    | T
    | {
        siteName?: T;
        siteDescription?: T;
      };
  branding?:
    | T
    | {
        logo?: T;
        logoSquare?: T;
        favicon?: T;
      };
  contactInfo?:
    | T
    | {
        contactName?: T;
        contactEmail?: T;
        contactPhone?: T;
        contactAddress?: T;
        socialMedia?:
          | T
          | {
              facebook?: T;
              twitter?: T;
              instagram?: T;
              linkedin?: T;
              youtube?: T;
              whatsapp?: T;
              telegram?: T;
            };
      };
  globalSeo?:
    | T
    | {
        keywords?: T;
        ogImage?: T;
      };
  updatedAt?: T;
  createdAt?: T;
  globalType?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "TaskSchedulePublish".
 */
export interface TaskSchedulePublish {
  input: {
    type?: ('publish' | 'unpublish') | null;
    locale?: string | null;
    doc?:
      | ({
          relationTo: 'properties';
          value: number | Property;
        } | null)
      | ({
          relationTo: 'pages';
          value: number | Page;
        } | null)
      | ({
          relationTo: 'blog';
          value: number | Blog;
        } | null);
    global?: ('main-menu' | 'footer') | null;
    user?: (number | null) | User;
  };
  output?: unknown;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "BannerBlock".
 */
export interface BannerBlock {
  style: 'info' | 'warning' | 'error' | 'success';
  content: {
    root: {
      type: string;
      children: {
        type: string;
        version: number;
        [k: string]: unknown;
      }[];
      direction: ('ltr' | 'rtl') | null;
      format: 'left' | 'start' | 'center' | 'right' | 'end' | 'justify' | '';
      indent: number;
      version: number;
    };
    [k: string]: unknown;
  };
  id?: string | null;
  blockName?: string | null;
  blockType: 'banner';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "CodeBlock".
 */
export interface CodeBlock {
  language?: ('typescript' | 'javascript' | 'css') | null;
  code: string;
  id?: string | null;
  blockName?: string | null;
  blockType: 'code';
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}